{"ast":null,"code":"import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nuseEffect(() => {\n  axios.get('/api/post').then(result => {\n    const data = result.data;\n    data.slice(0, 4);\n    setPosts(data);\n  }).catch(error => {\n    console.log(error);\n  });\n}, []);\nconst usePagination = {\n  getData: _ref => {\n    let {\n      from,\n      to\n    } = _ref;\n    return new Promise((resolve, reject) => {\n      const data = posts.slice(from, to);\n      resolve({\n        count: posts.length,\n        data: data\n      });\n    });\n  }\n};\n\n// function usePagination(data, pageSize) {\n\n//     const [currentPage, setCurrentPage] = useState(1);\n//     const maxPage = Math.ceil(data.length / pageSize);\n\n//     const currentData = () => {\n//         const begin = (currentPage - 1) * pageSize;\n//         const end = begin + pageSize;\n\n//         return data.slice(begin, end);\n//     }\n\n//     const next = () => {\n//         setCurrentPage(currentPage => Math.min(currentPage + 1, maxPage));\n//     }\n\n//     const prev = () => {\n//         setCurrentPage(currentPage => Math.max(currentPage - 1, 1));\n//     }\n\n//     const jump = (page) => {\n//         const pageNumber = Math.max(1, page);\n//         setCurrentPage(currentPage => Math.min(pageNumber, maxPage));\n//     }\n\n//     return {currentData, next, prev, jump, currentPage, maxPage};\n// }\n\nexport default usePagination;\n\n// ---\n\n// const post = [];\n\n// axios.get('/api/post')\n// .then((response) => {\n//     response.data.map((data, i) => {\n//         post[i] = data;\n//     })\n// })\n\n// const paginationService = {\n//     getData: ({from, to}) => {\n//         return new Promise((res, rej) => {\n//             const data = post.slice(from, to);\n//             res({\n//                 count : post.length,\n//                 data : data\n//             })\n//         })\n//     }\n// }","map":{"version":3,"names":["axios","React","useState","useEffect","get","then","result","data","slice","setPosts","catch","error","console","log","usePagination","getData","from","to","Promise","resolve","reject","posts","count","length"],"sources":["/Users/myeong/Documents/Develop/WinterDev/blogproject/client/src/services/Pagination.js"],"sourcesContent":["import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\n\nuseEffect(() => {\n    axios.get('/api/post')\n    .then((result) => {\n      const data = result.data;\n      data.slice(0, 4);\n\n      setPosts(data);\n    })\n    .catch((error) => {\n      console.log(error);\n    })\n}, [])\n\nconst usePagination = {\n    getData: ({from, to}) => {\n        return new Promise((resolve, reject) => {\n\n            const data = posts.slice(from, to);\n\n            resolve({\n                count : posts.length,\n                data : data\n            })\n        });\n    }\n}\n\n// function usePagination(data, pageSize) {\n\n//     const [currentPage, setCurrentPage] = useState(1);\n//     const maxPage = Math.ceil(data.length / pageSize);\n\n//     const currentData = () => {\n//         const begin = (currentPage - 1) * pageSize;\n//         const end = begin + pageSize;\n\n//         return data.slice(begin, end);\n//     }\n\n\n//     const next = () => {\n//         setCurrentPage(currentPage => Math.min(currentPage + 1, maxPage));\n//     }\n\n//     const prev = () => {\n//         setCurrentPage(currentPage => Math.max(currentPage - 1, 1));\n//     }\n\n//     const jump = (page) => {\n//         const pageNumber = Math.max(1, page);\n//         setCurrentPage(currentPage => Math.min(pageNumber, maxPage));\n//     }\n\n    \n//     return {currentData, next, prev, jump, currentPage, maxPage};\n// }\n\nexport default usePagination;\n\n\n// ---\n\n// const post = [];\n\n// axios.get('/api/post')\n// .then((response) => {\n//     response.data.map((data, i) => {\n//         post[i] = data;\n//     })\n// })\n\n// const paginationService = {\n//     getData: ({from, to}) => {\n//         return new Promise((res, rej) => {\n//             const data = post.slice(from, to);\n//             res({\n//                 count : post.length,\n//                 data : data\n//             })\n//         })\n//     }\n// }"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElDA,SAAS,CAAC,MAAM;EACZH,KAAK,CAACI,GAAG,CAAC,WAAW,CAAC,CACrBC,IAAI,CAAEC,MAAM,IAAK;IAChB,MAAMC,IAAI,GAAGD,MAAM,CAACC,IAAI;IACxBA,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAEhBC,QAAQ,CAACF,IAAI,CAAC;EAChB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB,CAAC,CAAC;AACN,CAAC,EAAE,EAAE,CAAC;AAEN,MAAMG,aAAa,GAAG;EAClBC,OAAO,EAAE,QAAgB;IAAA,IAAf;MAACC,IAAI;MAAEC;IAAE,CAAC;IAChB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAEpC,MAAMb,IAAI,GAAGc,KAAK,CAACb,KAAK,CAACQ,IAAI,EAAEC,EAAE,CAAC;MAElCE,OAAO,CAAC;QACJG,KAAK,EAAGD,KAAK,CAACE,MAAM;QACpBhB,IAAI,EAAGA;MACX,CAAC,CAAC;IACN,CAAC,CAAC;EACN;AACJ,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;;AAEA,eAAeO,aAAa;;AAG5B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}